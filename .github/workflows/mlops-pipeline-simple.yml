name: MLOps Pipeline - DVC + API (Simplified)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'

jobs:
  # ==============================================================================
  # JOB 1: Code Quality Checks
  # ==============================================================================
  quality:
    name: Code Quality & Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8
    
    - name: Run linting
      continue-on-error: true
      run: |
        flake8 src/ api/ --max-line-length=100 --ignore=E203,W503 --statistics || true

  # ==============================================================================
  # JOB 2: DVC Pipeline + API Test (All in Docker)
  # ==============================================================================
  pipeline-and-test:
    name: DVC Pipeline + API Test
    runs-on: ubuntu-latest
    needs: [quality]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Create .env file
      env:
        KAGGLE_USERNAME: ${{ secrets.KAGGLE_USERNAME }}
        KAGGLE_KEY: ${{ secrets.KAGGLE_KEY }}
      run: |
        cat > .env << EOF
        KAGGLE_USERNAME=$KAGGLE_USERNAME
        KAGGLE_KEY=$KAGGLE_KEY
        MLFLOW_TRACKING_URI=http://mlflow:5000
        API_HOST=0.0.0.0
        API_PORT=8000
        EOF
    
    - name: Run DVC Pipeline with Docker Compose
      run: |
        echo "🚀 Step 1: Running DVC Pipeline (data + training)..."
        docker compose up dvc-pipeline
        
        echo ""
        echo "✅ DVC Pipeline completed"
        echo "📦 Generated artifacts:"
        ls -lh data/processed/ 2>/dev/null || echo "  data/processed/ not found"
        ls -lh models/production/latest/ 2>/dev/null || echo "  models/ not found"
        ls -lh mlruns/ 2>/dev/null || echo "  mlruns/ not found"
    
    - name: Verify model artifacts
      run: |
        echo "🔍 Verifying required model files..."
        
        if [ -f "models/production/latest/model.pkl" ]; then
          echo "✅ model.pkl found"
        else
          echo "❌ model.pkl NOT FOUND"
          exit 1
        fi
        
        if [ -f "models/production/latest/scaler.pkl" ]; then
          echo "✅ scaler.pkl found"
        else
          echo "❌ scaler.pkl NOT FOUND"
          exit 1
        fi
        
        if [ -f "models/production/latest/metadata.json" ]; then
          echo "✅ metadata.json found"
        else
          echo "❌ metadata.json NOT FOUND"
          exit 1
        fi
    
    - name: Start API with Docker Compose
      run: |
        echo "🚀 Step 2: Starting API..."
        docker compose up -d api
        
        echo "⏳ Waiting 30 seconds for API to start..."
        sleep 30
        
        echo "📊 Container status:"
        docker compose ps
    
    - name: Check API logs
      if: always()
      run: |
        echo "📋 API Logs:"
        docker compose logs api | tail -100
    
    - name: Test API - Health Check
      run: |
        echo "🧪 Testing /health endpoint..."
        for i in {1..10}; do
          if curl -f -s http://localhost:8000/health; then
            echo ""
            echo "✅ Health check passed"
            break
          fi
          echo "⏳ Attempt $i/10..."
          sleep 3
        done
    
    - name: Test API - Prediction (CRITICAL)
      run: |
        echo "🧪 Testing /predict endpoint..."
        
        RESPONSE=$(curl -s -w "\nHTTP_CODE:%{http_code}" -X POST http://localhost:8000/predict \
          -H "Content-Type: application/json" \
          -d '{
            "CRIM": 0.00632,
            "NOX": 0.538,
            "RM": 6.575,
            "AGE": 65.2,
            "DIS": 4.0900,
            "RAD": 1.0,
            "TAX": 296.0,
            "PTRATIO": 15.3,
            "B": 396.90,
            "LSTAT": 4.98
          }')
        
        HTTP_CODE=$(echo "$RESPONSE" | grep "HTTP_CODE:" | cut -d: -f2)
        BODY=$(echo "$RESPONSE" | grep -v "HTTP_CODE:")
        
        echo "HTTP Status: $HTTP_CODE"
        echo "Response:"
        echo "$BODY" | jq '.' 2>/dev/null || echo "$BODY"
        
        if [ "$HTTP_CODE" != "200" ]; then
          echo ""
          echo "❌ PREDICTION FAILED"
          docker compose logs api
          exit 1
        fi
        
        if echo "$BODY" | jq -e '.prediction' > /dev/null 2>&1; then
          PRED_VALUE=$(echo "$BODY" | jq -r '.prediction')
          echo ""
          echo "✅ PREDICTION SUCCESSFUL"
          echo "   Predicted price: \$${PRED_VALUE}K"
        else
          echo "❌ Response missing 'prediction' field"
          exit 1
        fi
    
    - name: Test multiple predictions
      run: |
        echo "🧪 Testing batch predictions..."
        
        # Test 1
        echo "Test 1: Low-risk property"
        curl -s -X POST http://localhost:8000/predict \
          -H "Content-Type: application/json" \
          -d '{"CRIM":0.01,"NOX":0.4,"RM":7.0,"AGE":20,"DIS":5.0,"RAD":1,"TAX":200,"PTRATIO":12,"B":390,"LSTAT":3}' \
          | jq '.prediction' || echo "Failed"
        
        # Test 2
        echo "Test 2: High-risk property"
        curl -s -X POST http://localhost:8000/predict \
          -H "Content-Type: application/json" \
          -d '{"CRIM":10.0,"NOX":0.7,"RM":4.0,"AGE":95,"DIS":1.5,"RAD":24,"TAX":700,"PTRATIO":22,"B":100,"LSTAT":30}' \
          | jq '.prediction' || echo "Failed"
        
        echo "✅ Batch predictions completed"
    
    - name: Upload model artifacts
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: trained-model
        path: |
          models/production/latest/
        retention-days: 30
    
    - name: Create pipeline summary
      if: always()
      run: |
        echo "## 🚀 MLOps Pipeline Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "✅ **DVC Pipeline**: Completed in Docker" >> $GITHUB_STEP_SUMMARY
        echo "✅ **API Prediction**: Working" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🔗 **Commit**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "👤 **Author**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📦 Artifacts" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        ls -lh models/production/latest/ 2>/dev/null || echo "Not available" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
    
    - name: Cleanup
      if: always()
      run: |
        echo "🧹 Cleaning up..."
        docker compose down -v || true
        docker compose ps
