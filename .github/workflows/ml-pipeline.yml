name: MLOps Pipeline - Train & Deploy

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Permite ejecuci√≥n manual

env:
  PYTHON_VERSION: '3.10'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ==============================================================================
  # JOB 1: Setup y Validaci√≥n
  # ==============================================================================
  setup:
    name: Setup & Validation
    runs-on: ubuntu-latest
    outputs:
      should-train: ${{ steps.check-changes.outputs.train }}
      should-deploy: ${{ steps.check-changes.outputs.deploy }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 2  # Para comparar cambios
    
    - name: Check file changes
      id: check-changes
      run: |
        if git diff --name-only HEAD^ HEAD | grep -E '(src/model_|src/data_|params.yaml|dvc.yaml)'; then
          echo "train=true" >> $GITHUB_OUTPUT
        else
          echo "train=false" >> $GITHUB_OUTPUT
        fi
        
        if git diff --name-only HEAD^ HEAD | grep -E '(api/|Dockerfile|requirements.txt)'; then
          echo "deploy=true" >> $GITHUB_OUTPUT
        else
          echo "deploy=false" >> $GITHUB_OUTPUT
        fi

  # ==============================================================================
  # JOB 2: Tests y Linting
  # ==============================================================================
  test:
    name: Tests & Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .
    
    - name: Run linting (flake8)
      continue-on-error: true
      run: |
        pip install flake8
        flake8 src/ --max-line-length=100 --ignore=E203,W503 --statistics || true
    
    - name: Run tests
      if: hashFiles('tests/**/*.py') != ''
      run: |
        pip install pytest pytest-cov
        pytest tests/ -v --cov=src --cov-report=term --cov-report=xml || true

  # ==============================================================================
  # JOB 3: DVC Pipeline - Entrenamiento del Modelo
  # ==============================================================================
  train:
    name: Train Model with DVC
    runs-on: ubuntu-latest
    needs: [setup, test]
    if: needs.setup.outputs.should-train == 'true' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .
    
    - name: Configure Kaggle credentials
      env:
        KAGGLE_USERNAME: ${{ secrets.KAGGLE_USERNAME }}
        KAGGLE_KEY: ${{ secrets.KAGGLE_KEY }}
      run: |
        mkdir -p ~/.kaggle
        echo "{\"username\":\"$KAGGLE_USERNAME\",\"key\":\"$KAGGLE_KEY\"}" > ~/.kaggle/kaggle.json
        chmod 600 ~/.kaggle/kaggle.json
    
    - name: Run DVC pipeline
      run: |
        echo "üöÄ Running DVC repro..."
        dvc repro --force
    
    - name: Verify model artifacts
      run: |
        echo "üì¶ Checking generated artifacts..."
        ls -lh models/production/latest/
        ls -lh models/model_info.json || echo "model_info.json not found"
        ls -lh mlruns/ || echo "mlruns not found"
    
    - name: Upload model artifacts
      uses: actions/upload-artifact@v4
      with:
        name: model-artifacts
        path: |
          models/production/latest/
          models/model_info.json
          models/standard_scaler.pkl
          mlruns/
        retention-days: 30
    
    - name: Upload processed data
      uses: actions/upload-artifact@v4
      with:
        name: processed-data
        path: |
          data/processed/
        retention-days: 7

  # ==============================================================================
  # JOB 4: Build Docker Image
  # ==============================================================================
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [train]
    if: always() && (needs.train.result == 'success' || needs.setup.outputs.should-deploy == 'true')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download model artifacts
      uses: actions/download-artifact@v4
      with:
        name: model-artifacts
        path: .
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # ==============================================================================
  # JOB 5: Deploy API
  # ==============================================================================
  deploy:
    name: Deploy API
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download model artifacts
      uses: actions/download-artifact@v4
      with:
        name: model-artifacts
        path: .
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install -e .
    
    - name: Start API locally for testing
      run: |
        echo "üöÄ Starting API for smoke tests..."
        nohup uvicorn api.main:app --host 0.0.0.0 --port 8000 &
        sleep 10
    
    - name: Run API smoke tests
      run: |
        echo "üß™ Running smoke tests..."
        
        # Health check
        curl -f http://localhost:8000/health || exit 1
        echo "‚úÖ Health check passed"
        
        # Model info
        curl -f http://localhost:8000/model/info || exit 1
        echo "‚úÖ Model info endpoint passed"
        
        # Prediction test
        curl -X POST http://localhost:8000/predict \
          -H "Content-Type: application/json" \
          -d '{
            "CRIM": 0.00632,
            "NOX": 0.538,
            "RM": 6.575,
            "AGE": 65.2,
            "DIS": 4.0900,
            "RAD": 1.0,
            "TAX": 296.0,
            "PTRATIO": 15.3,
            "B": 396.90,
            "LSTAT": 4.98
          }' || exit 1
        echo "‚úÖ Prediction endpoint passed"
    
    - name: Create deployment summary
      run: |
        echo "## üöÄ Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "‚úÖ **Status**: Successful" >> $GITHUB_STEP_SUMMARY
        echo "üì¶ **Image**: \`ghcr.io/${{ github.repository }}:latest\`" >> $GITHUB_STEP_SUMMARY
        echo "üîó **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "üë§ **Author**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìä Model Artifacts" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        ls -lh models/production/latest/ >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
    
    # Opcional: Deploy to cloud service
    # Descomenta y configura seg√∫n tu proveedor (AWS, GCP, Azure, etc.)
    # - name: Deploy to Cloud Run / ECS / AKS
    #   run: |
    #     # Example for Google Cloud Run:
    #     # gcloud run deploy housing-api \
    #     #   --image ghcr.io/${{ github.repository }}:latest \
    #     #   --platform managed \
    #     #   --region us-central1
    #     echo "Configure your cloud deployment here"
