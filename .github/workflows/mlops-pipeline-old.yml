name: MLOps Pipeline - DVC Train & Deploy API

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Manual execution

env:
  PYTHON_VERSION: '3.11'

jobs:
  # ==============================================================================
  # JOB 1: Setup and Validation
  # ==============================================================================
  setup:
    name: Setup & Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Verify workspace structure
      run: |
        echo "📂 Workspace structure:"
        ls -lah
        echo ""
        echo "✅ Workspace ready"

  # ==============================================================================
  # JOB 2: Code Quality Checks
  # ==============================================================================
  quality:
    name: Code Quality & Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 pytest pytest-cov
    
    - name: Run linting
      continue-on-error: true
      run: |
        flake8 src/ api/ --max-line-length=100 --ignore=E203,W503 --statistics || true
    
    - name: Run tests
      if: hashFiles('tests/**/*.py') != ''
      continue-on-error: true
      run: |
        pytest tests/ -v --cov=src --cov-report=term || true

  # ==============================================================================
  # JOB 3: DVC Pipeline - Train Model
  # ==============================================================================
  train:
    name: DVC Pipeline - Train Model
    runs-on: ubuntu-latest
    needs: [setup, quality]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Configure Kaggle credentials
      env:
        KAGGLE_USERNAME: ${{ secrets.KAGGLE_USERNAME }}
        KAGGLE_KEY: ${{ secrets.KAGGLE_KEY }}
      run: |
        mkdir -p ~/.kaggle
        echo "{\"username\":\"$KAGGLE_USERNAME\",\"key\":\"$KAGGLE_KEY\"}" > ~/.kaggle/kaggle.json
        chmod 600 ~/.kaggle/kaggle.json
    
    - name: Initialize DVC
      run: |
        echo "🔧 Initializing DVC..."
        dvc init --no-scm --force
    
    - name: Run DVC Pipeline
      run: |
        echo "🚀 Running DVC repro..."
        dvc repro --force
    
    - name: Verify generated artifacts
      run: |
        echo "📦 Checking generated artifacts..."
        echo "=== Data ==="
        ls -lh data/raw/ || echo "❌ data/raw/ not found"
        ls -lh data/processed/ || echo "❌ data/processed/ not found"
        echo ""
        echo "=== Models ==="
        ls -lh models/production/latest/ || echo "❌ models/production/latest/ not found"
        cat models/model_info.json || echo "❌ model_info.json not found"
        echo ""
        echo "=== MLflow ==="
        ls -lh mlruns/ || echo "❌ mlruns/ not found"
    
    - name: Upload model artifacts
      uses: actions/upload-artifact@v4
      with:
        name: model-artifacts
        path: |
          models/
          mlruns/
        retention-days: 30
    
    - name: Upload processed data
      uses: actions/upload-artifact@v4
      with:
        name: processed-data
        path: |
          data/processed/
          data/raw/HousingData.csv
        retention-days: 7

  # ==============================================================================
  # JOB 4: Build Docker Image
  # ==============================================================================
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [train]
    if: always() && needs.train.result == 'success'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download model artifacts
      uses: actions/download-artifact@v4
      with:
        name: model-artifacts
        path: .
    
    - name: Verify downloaded artifacts
      run: |
        echo "📦 Verifying artifacts before Docker build..."
        ls -lR models/ mlruns/
    
    - name: Build the Docker image
      run: |
        echo "🐳 Building Docker image..."
        docker build . --file Dockerfile --tag meli-mlops-api:$(date +%s)
        docker build . --file Dockerfile --tag meli-mlops-api:latest
        echo "✅ Docker image built successfully"
    
    - name: List Docker images
      run: |
        echo "📋 Available Docker images:"
        docker images | grep meli-mlops-api

  # ==============================================================================
  # JOB 5: Test API with Docker Compose
  # ==============================================================================
  test-api:
    name: Test API with Docker Compose
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download model artifacts
      uses: actions/download-artifact@v4
      with:
        name: model-artifacts
        path: .
    
    - name: Download processed data
      uses: actions/download-artifact@v4
      with:
        name: processed-data
        path: ./data
    
    - name: Verify artifacts
      run: |
        echo "📦 Verifying downloaded artifacts..."
        ls -lh models/production/latest/ || echo "❌ Models not found"
        ls -lh data/processed/ || echo "❌ Processed data not found"
        ls -lh mlruns/ || echo "❌ MLruns not found"
    
    - name: Build and start services
      run: |
        echo "� Building and starting services..."
        docker compose up -d --build
    
    - name: Wait for services
      run: |
        echo "⏳ Waiting 60 seconds for services to initialize..."
        sleep 60
    
    - name: Check container status
      run: |
        echo "📊 Container status:"
        docker compose ps
        echo ""
        echo "📋 Running containers:"
        docker ps
    
    - name: Check DVC pipeline logs
      if: always()
      run: |
        echo "=== DVC Pipeline Logs ==="
        docker compose logs dvc-pipeline || echo "No logs available"
    
    - name: Check MLflow logs
      if: always()
      run: |
        echo "=== MLflow Logs ==="
        docker compose logs mlflow || echo "No logs available"
    
    - name: Check API logs
      if: always()
      run: |
        echo "=== API Logs ==="
        docker compose logs api || echo "No logs available"
    
    - name: Test API (optional)
      continue-on-error: true
      run: |
        echo "🧪 Testing API endpoints..."
        
        # Wait a bit more
        sleep 30
        
        # Try to hit the API
        curl -f http://localhost:8000/health || echo "⚠️ API health check failed"
        curl -f http://localhost:8000/model/info || echo "⚠️ Model info failed"
    
    - name: Create pipeline summary
      if: always()
      run: |
        echo "## 🚀 Pipeline Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "✅ **DVC Pipeline**: Completed" >> $GITHUB_STEP_SUMMARY
        echo "📦 **Docker Image**: Built successfully" >> $GITHUB_STEP_SUMMARY
        echo "🔗 **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "👤 **Author**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### � Generated Artifacts" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        ls -lh models/production/latest/ 2>/dev/null || echo "Models directory not accessible" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
    
    - name: Cleanup
      if: always()
      run: |
        echo "🧹 Cleaning up..."
        docker compose down -v || true
        docker compose ps
