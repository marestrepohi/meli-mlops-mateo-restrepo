# =====================================================================
# DVC Pipeline Configuration
# Data Version Control para MLOps - Housing Price Prediction
# =====================================================================
# Pipeline simplificado de 3 etapas:
# 1. data_ingestion: Descarga de datos desde Kaggle
# 2. data_preparation: Limpieza, splitting y escalado
# 3. model_train: Entrenamiento de 3 experimentos XGBoost con SHAP + MLflow
# =====================================================================

stages:
  # ===================================================================
  # Stage 1: Data Ingestion
  # Descarga datos desde Kaggle, genera dataset limpio y reporte EDA
  # ===================================================================
  data_ingestion:
    cmd: python src/data_ingestion.py
    deps:
      - src/data_ingestion.py
    outs:
      - data/raw/HousingData.csv
      - data/reports/

  # ===================================================================
  # Stage 2: Data Preparation
  # Limpieza, transformación y feature engineering
  # ===================================================================
  data_preparation:
    cmd: python src/data_preparation.py
    deps:
      - src/data_preparation.py
      - data/raw/HousingData.csv
    params:
      - data_ingestion
      - preprocessing
      - data_preparation
    outs:
      - data/processed/
      - models/standard_scaler.pkl

  # ===================================================================
  # Stage 3: Model Training
  # Entrenamiento de 3 experimentos XGBoost con SHAP + MLflow
  # Experimentos:
  #   1. Hyperparameter Tuning (todas las features)
  #   2. Important Features (SHAP percentil 20 + default params)
  #   3. Tuning on Selected Features (features de exp2 + new tuning)
  # ===================================================================
  model_train:
    cmd: python src/model_train.py
    deps:
      - src/model_train.py
      - data/processed/train.csv
      - data/processed/test.csv
      - models/standard_scaler.pkl
    params:
      - data_ingestion.target_column
      - preprocessing.processed_data_dir
      - model_training.model_output_dir
      - model_training.training_artifacts_dir
      - mlflow.tracking_uri
      - mlflow.experiment_name
    outs:
      - mlartifacts/training/best_model.pkl
      - mlartifacts/training/best_model_info.json
      - mlartifacts/training/best_metrics.json
      - mlartifacts/training/experiments_summary.json

  # ===================================================================
  # Stage 4: Model Registration
  # Registro del mejor modelo en MLflow Model Registry para producción
  # Promociona el modelo a stage Staging/Production
  # ===================================================================
  model_register:
    cmd: python src/model_register.py --stage Staging
    deps:
      - src/model_register.py
      - mlartifacts/training/best_model_info.json
      - mlartifacts/training/best_metrics.json
      - mlartifacts/training/best_model.pkl
      - models/standard_scaler.pkl
    params:
      - mlflow
    outs:
      - mlartifacts/registry/registered_model_info.json
      - mlartifacts/registry/registration_metrics.json
      - models/production/
