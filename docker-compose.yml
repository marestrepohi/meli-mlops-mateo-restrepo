services:
  # ============================================================================
  # PASO 1: Pipeline DVC (ingesta de datos + preparaci√≥n + entrenamiento)
  # ============================================================================
  dvc-pipeline:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: mlops-housing-dvc-pipeline
    volumes:
      - ./data:/app/data
      - ./models:/app/models
      - ./mlruns:/app/mlruns
    environment:
      - PYTHONUNBUFFERED=1
      - MLFLOW_TRACKING_URI=mlruns
      - MLFLOW_EXPERIMENT_NAME=housing-price-prediction
      - MODEL_PATH=models/production
      - DATA_PATH=data/housing.csv
      - RAW_DATA_PATH=data/raw
      - KAGGLE_USERNAME=${KAGGLE_USERNAME:-marestrepohi}
      - KAGGLE_KEY=${KAGGLE_KEY:-037c85291a66a2b8159a83970e814353}
      - ENABLE_MONITORING=true
      - LOG_LEVEL=INFO
    command: >
      sh -c "
        echo 'üîß Paso 1: Inicializando repositorio DVC (sin SCM)...' &&
        dvc init --no-scm --force &&
        echo '‚úÖ DVC inicializado' &&
        echo 'üîÑ Paso 2: Ejecutando pipeline DVC (ingesta + preparaci√≥n + entrenamiento)...' &&
        dvc repro &&
        echo '‚úÖ Pipeline DVC completado' &&
        echo 'ü§ñ Paso 3: Modelos entrenados y mejor modelo seleccionado' &&
        echo '‚úÖ Pipeline finalizado - datos, modelos, mlruns generados' &&
        echo 'üëâ Siguiente: MLflow UI se iniciar√° en puerto 5000' &&
        echo 'üéØ El contenedor DVC saldr√° ahora - ¬°esto es esperado!'
      "
    restart: "no"
    networks:
      - mlops-housing-network

  # ============================================================================
  # PASO 2: MLflow UI (despu√©s del pipeline DVC)
  # ============================================================================
  mlflow:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: mlops-housing-mlflow
    ports:
      - "5000:5000"
    volumes:
      - ./mlruns:/app/mlruns:ro
    command: >
      sh -c "
        echo '‚è≥ Esperando a que el pipeline DVC se complete...' &&
        while [ ! -d /app/mlruns ] || [ -z \"$$(ls -A /app/mlruns 2>/dev/null)\" ]; do
          echo '   Esperando directorio mlruns...' &&
          sleep 5
        done &&
        echo '‚úÖ Directorio mlruns encontrado' &&
        echo 'üìä Paso 4: Iniciando MLflow UI en puerto 5000...' &&
        echo '   Usando mlruns desde: /app/mlruns' &&
        mlflow ui --host 0.0.0.0 --port 5000 --backend-store-uri file:///app/mlruns
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    depends_on:
      dvc-pipeline:
        condition: service_completed_successfully
    networks:
      - mlops-housing-network

  # ============================================================================
  # PASO 3: FastAPI (despu√©s de MLflow)
  # ============================================================================
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: mlops-housing-api
    ports:
      - "8000:8000"
    volumes:
      - ./data:/app/data
      - ./models:/app/models:ro
      - ./mlruns:/app/mlruns:ro
    environment:
      - PYTHONUNBUFFERED=1
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - MODEL_PATH=models/production
      - ENABLE_MONITORING=true
      - LOG_LEVEL=INFO
    command: >
      sh -c "
        echo '‚è≥ Esperando a que MLflow UI est√© listo...' &&
        sleep 10 &&
        echo 'üöÄ Paso 5: Iniciando FastAPI en puerto 8000...' &&
        echo '   Modelo: models/production/latest/' &&
        uvicorn api.main:app --host 0.0.0.0 --port 8000 --reload
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    depends_on:
      mlflow:
        condition: service_healthy
    networks:
      - mlops-housing-network

  # ============================================================================
  # PASO 4: Frontend (despu√©s de API)
  # ============================================================================
  frontend:
    image: node:20-alpine
    container_name: mlops-housing-frontend
    working_dir: /app
    ports:
      - "8080:8080"
    volumes:
      - ./front:/app
      - ./data:/app/public/data:ro
      - ./mlruns:/app/public/mlruns:ro
      - ./models:/app/public/models:ro
    environment:
      - VITE_API_URL=http://localhost:8000
      - VITE_MLFLOW_URL=http://localhost:5000
    command: >
      sh -c "
        echo '‚è≥ Esperando a que API est√© lista...' &&
        sleep 10 &&
        echo 'üì¶ Paso 6: Instalando dependencias del frontend...' &&
        npm install &&
        echo 'üîÑ Paso 7: Sincronizando carpetas (data, mlruns, modelos)...' &&
        echo '   ‚úÖ data/ -> public/data/ (montado)' &&
        echo '   ‚úÖ mlruns/ -> public/mlruns/ (montado)' &&
        echo '   ‚úÖ models/ -> public/models/ (montado)' &&
        echo 'üåê Paso 8: Iniciando servidor Vite en puerto 8080...' &&
        echo '   Frontend consumir√°:' &&
        echo '   - API: http://localhost:8000' &&
        echo '   - MLflow: http://localhost:5000' &&
        npm run dev -- --host 0.0.0.0 --port 8080
      "
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8080"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    depends_on:
      api:
        condition: service_healthy
      mlflow:
        condition: service_healthy
    networks:
      - mlops-housing-network

networks:
  mlops-housing-network:
    driver: bridge
